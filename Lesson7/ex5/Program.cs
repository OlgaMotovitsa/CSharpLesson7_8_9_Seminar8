// Вычислить а в степени n

// Итак, мы поскладывали числа, пособирали строки, поперемножали числа. Теперь попробуем
// возвести число а в натуральную степень n.
// В общем случае даже эту задачу можно разобщить для целой степени. В чём идея? Число а в
// степени n по определению натуральной степени — это а*а*a и так далее n раз. Те, кто был на
// лекциях по математике, информатике, как минимум должен это помнить. Таким образом, если
// мы будем использовать такой подход, то простой итеративный метод будет выглядеть как
// перебор счётчика от 1 до n и домножения результата на текущее значение так называемого
// основания степени. А n — это показатель степени. В случае же рекурсивного подхода сразу
// опишем условия выхода — начнём читать код от «если n равно 0, то возвращаем единицу».
// Не рассматриваем 0
// 0
// , как некую неопределённость. И договоримся, что 0
// 0 для нашего случая
// будет 1. В общем случае хорошо бы это рассмотреть отдельным вариантом.
// Итак, если показатель степени равен 0, будем возвращать 1, иначе — запустим рекурсивный
// подсчёт, там текущее значение а будет домножаться на вызов рекурсивной функции, где в
// качестве аргумента передаём основания нашей степени и показатель на 1 меньше.
// От себя отмечу, если хотите уменьшить число строк, то язык C# позволяет использовать так
// называемый тернарный оператор. И та конструкция, которая написана на двух строчках,
// записывается и одной строкой — return n = 0?1: и так далее. То есть можете это
// протестировать



int PowerFor(int a, int n)
{
    int result = 1;
    for (int i = 1; i <= n; i++) result *= a;
    return result;
}

int PowerRec(int a, int n)
{
    return n == 0 ? 1 : PowerRec(a, n - 1) * a;
}

int PowerRecMath(int a, int n)
{
    if (n == 0) return 1;
    else if (n % 2 == 0) return PowerRecMath(a * a, n / 2);
    else return PowerRecMath(a, n - 1) * a;
}




System.Console.WriteLine(PowerFor(2, 10));
System.Console.WriteLine(PowerRec(2, 10));